(self.webpackChunk=self.webpackChunk||[]).push([[524],{44:(e,t,r)=>{const i=r(377),a=r(613),{emptyLine:s,lightningChart:o,yDimensionStrategy:n,AxisScrollStrategies:l,AxisTickStrategies:d,LegendPosition:S,AutoCursorModes:c,Themes:u}=i,{createProgressiveFunctionGenerator:m}=a,h=(e,t,r,i,a)=>{let s;for(let o=r;o<=i;o+=a){const r=t(o),i=Math.abs(r-e);if(void 0===s||i<s.delta)s={x:o,delta:i};else if(void 0!==s&&i>s.delta)break}return s.x},p=o({resourcesBaseUrl:new URL(document.head.baseURI).origin+new URL(document.head.baseURI).pathname+"resources/"}).ChartXY({legend:{position:S.TopRight},theme:u[new URLSearchParams(window.location.search).get("theme")||"darkGold"]||void 0}).setTitle("Probability distribution + Simulated accumulation and BoxSeries").setCursorMode("show-pointed").setPadding({right:20}),g=-4,y=.02,x=p.getDefaultAxisY(),A=p.addAxisY();p.getDefaultAxisX().setInterval({start:g,end:4,stopAxisAfter:!1}).setScrollStrategy(void 0),x.setTitle("Distribution function").setScrollStrategy(l.expansion).setTickStrategy(d.Numeric,e=>e.setMajorTickStyle(e=>e.setGridStrokeStyle(s)).setMinorTickStyle(e=>e.setGridStrokeStyle(s))),A.setTitle("Accumulated distribution (%)").setInterval({start:0,end:1,stopAxisAfter:!1}).setScrollStrategy(void 0).setTickStrategy(d.Numeric,e=>e.setMajorTickStyle(e=>e.setGridStrokeStyle(s)).setMinorTickStyle(e=>e.setGridStrokeStyle(s)));const k=p.addPointLineAreaSeries({yAxis:A}).setName("Simulated Cumulative Distribution"),f=p.addPointLineAreaSeries({yAxis:x}).setName("Probability Distribution"),b=p.addAreaRangeSeries({yAxis:x}).setName("Violin"),M=p.addBoxSeries({yAxis:x,dimensionStrategy:n}).setName("Box");(()=>{k.clear(),f.clear(),M.clear(),b.clear();const e=e=>1/(1*Math.sqrt(2*Math.PI))*Math.pow(Math.E,-Math.pow(e-0,2)/2),t=((e,t,r,i)=>{const a=[];for(let t=-4;t<=4;t+=i)a.push(e(t));const s=a.reduce((e,t)=>e+t,0),o=[];let n=0;for(const e of a)n+=e/s,o.push(n);return e=>{const t=(e- -4)/8*400,r=Math.min(Math.max(Math.round(t),0),o.length-1);return o[r]}})(e,0,0,y);x.getStopped()||x.setInterval({start:0,end:1,stopAxisAfter:!1}),m().setSamplingFunction(t).setStart(g).setEnd(4).setStep(y).generate().setStreamBatchSize(8e3/900).setStreamInterval(30).toStream().forEach(e=>k.appendSample(e)),m().setSamplingFunction(e).setStart(g).setEnd(4).setStep(y).generate().setStreamBatchSize(8e3/900).setStreamInterval(30).toStream().forEach(e=>{f.appendSample(e),e.y>=.001&&b.add({position:e.x,high:1+e.y/2,low:1-e.y/2})}),setTimeout(()=>{const e=h(.25,t,g,4,y),r=h(.5,t,g,4,y),i=h(.75,t,g,4,y),a=i-e,s={start:.9,end:1.1,lowerExtreme:e-1.5*a,lowerQuartile:e,median:r,upperQuartile:i,upperExtreme:i+1.5*a};M.add(s)},1500)})()},216:()=>{}},e=>{e.O(0,[502],()=>e(e.s=44)),e.O()}]);